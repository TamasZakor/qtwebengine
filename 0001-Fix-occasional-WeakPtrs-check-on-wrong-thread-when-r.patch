From 4ee8431b68d15e4c38eb3fa4e88b88826644bc93 Mon Sep 17 00:00:00 2001
From: Tamas Zakor <ztamas@inf.u-szeged.hu>
Date: Mon, 20 Apr 2020 11:41:29 +0200
Subject: [PATCH] Fix occasional WeakPtrs check on wrong thread when reset
 network context

StoragePartionImpl::InitNetwork reset the old network context when
the http cache is still clearing. Wait for http cache clearing and
after call the ProfileIODataQt::resetNetworkContext().

Change-Id: I6750341ff23f704ba547c913f40b0cec92b1cc43
---
 src/core/profile_adapter.cpp    | 35 ++++++++--------
 src/core/profile_io_data_qt.cpp | 72 +++++++++++++++++++++++++++++++++
 src/core/profile_io_data_qt.h   | 25 ++++++++++++
 3 files changed, 116 insertions(+), 16 deletions(-)

diff --git a/src/core/profile_adapter.cpp b/src/core/profile_adapter.cpp
index d2c4ab1d..7bf46b7e 100644
--- a/src/core/profile_adapter.cpp
+++ b/src/core/profile_adapter.cpp
@@ -142,7 +142,8 @@ void ProfileAdapter::setStorageName(const QString &storageName)
     m_name = storageName;
     if (!m_offTheRecord) {
         m_profile->setupPrefService();
-        m_profile->m_profileIOData->resetNetworkContext();
+        if (m_profile->m_profileIOData->hasPendingStorageRequest())
+            m_profile->m_profileIOData->resetNetworkContext();
         if (m_visitedLinksManager)
             resetVisitedLinksManager();
     }
@@ -154,7 +155,8 @@ void ProfileAdapter::setOffTheRecord(bool offTheRecord)
         return;
     m_offTheRecord = offTheRecord;
     m_profile->setupPrefService();
-    m_profile->m_profileIOData->resetNetworkContext();
+    if (m_profile->m_profileIOData->hasPendingStorageRequest())
+        m_profile->m_profileIOData->resetNetworkContext();
     if (m_visitedLinksManager)
         resetVisitedLinksManager();
 }
@@ -259,7 +261,8 @@ void ProfileAdapter::setDataPath(const QString &path)
     m_dataPath = path;
     if (!m_offTheRecord) {
         m_profile->setupPrefService();
-        m_profile->m_profileIOData->resetNetworkContext();
+        if (m_profile->m_profileIOData->hasPendingStorageRequest())
+            m_profile->m_profileIOData->resetNetworkContext();
         if (m_visitedLinksManager)
             resetVisitedLinksManager();
     }
@@ -286,8 +289,8 @@ void ProfileAdapter::setCachePath(const QString &path)
     if (m_cachePath == path)
         return;
     m_cachePath = path;
-    if (!m_offTheRecord)
-        m_profile->m_profileIOData->resetNetworkContext();
+    if (!m_offTheRecord && m_profile->m_profileIOData->hasPendingStorageRequest())
+            m_profile->m_profileIOData->resetNetworkContext();
 }
 
 QString ProfileAdapter::httpCachePath() const
@@ -342,7 +345,8 @@ void ProfileAdapter::setHttpCacheType(ProfileAdapter::HttpCacheType newhttpCache
     if (oldCacheType == httpCacheType())
         return;
     if (!m_offTheRecord) {
-        m_profile->m_profileIOData->resetNetworkContext();
+        if (m_profile->m_profileIOData->hasPendingStorageRequest())
+            m_profile->m_profileIOData->resetNetworkContext();
         if (m_httpCacheType == NoCache)
             clearHttpCache();
     }
@@ -361,8 +365,8 @@ void ProfileAdapter::setPersistentCookiesPolicy(ProfileAdapter::PersistentCookie
     m_persistentCookiesPolicy = newPersistentCookiesPolicy;
     if (oldPolicy == persistentCookiesPolicy())
         return;
-    if (!m_offTheRecord)
-        m_profile->m_profileIOData->resetNetworkContext();
+    if (!m_offTheRecord && m_profile->m_profileIOData->hasPendingStorageRequest())
+            m_profile->m_profileIOData->resetNetworkContext();
 }
 
 ProfileAdapter::VisitedLinksPolicy ProfileAdapter::visitedLinksPolicy() const
@@ -416,8 +420,8 @@ void ProfileAdapter::setHttpCacheMaxSize(int maxSize)
     if (m_httpCacheMaxSize == maxSize)
         return;
     m_httpCacheMaxSize = maxSize;
-    if (!m_offTheRecord)
-        m_profile->m_profileIOData->resetNetworkContext();
+    if (!m_offTheRecord && m_profile->m_profileIOData->hasPendingStorageRequest())
+            m_profile->m_profileIOData->resetNetworkContext();
 }
 
 enum class SchemeType { Protected, Overridable, Custom, Unknown };
@@ -592,10 +596,7 @@ void ProfileAdapter::setHttpAcceptLanguage(const QString &httpAcceptLanguage)
 
 void ProfileAdapter::clearHttpCache()
 {
-    content::BrowsingDataRemover *remover = content::BrowserContext::GetBrowsingDataRemover(m_profile.data());
-    remover->Remove(base::Time(), base::Time::Max(),
-        content::BrowsingDataRemover::DATA_TYPE_CACHE,
-        content::BrowsingDataRemover::ORIGIN_TYPE_UNPROTECTED_WEB | content::BrowsingDataRemover::ORIGIN_TYPE_PROTECTED_WEB);
+    m_profile->m_profileIOData->clearHttpCache();
 }
 
 void ProfileAdapter::setSpellCheckLanguages(const QStringList &languages)
@@ -656,7 +657,8 @@ void ProfileAdapter::setUseForGlobalCertificateVerification(bool enable)
     if (enable) {
         if (profileForglobalCertificateVerification) {
             profileForglobalCertificateVerification->m_usedForGlobalCertificateVerification = false;
-            profileForglobalCertificateVerification->m_profile->m_profileIOData->resetNetworkContext();
+            if (m_profile->m_profileIOData->hasPendingStorageRequest())
+                profileForglobalCertificateVerification->m_profile->m_profileIOData->resetNetworkContext();
             for (auto *client : qAsConst(profileForglobalCertificateVerification->m_clients))
                 client->useForGlobalCertificateVerificationChanged();
         }
@@ -667,7 +669,8 @@ void ProfileAdapter::setUseForGlobalCertificateVerification(bool enable)
         profileForglobalCertificateVerification = nullptr;
     }
 
-    m_profile->m_profileIOData->resetNetworkContext();
+    if (m_profile->m_profileIOData->hasPendingStorageRequest())
+        m_profile->m_profileIOData->resetNetworkContext();
 }
 
 bool ProfileAdapter::isUsedForGlobalCertificateVerification() const
diff --git a/src/core/profile_io_data_qt.cpp b/src/core/profile_io_data_qt.cpp
index 64ad096a..f17f3e5f 100644
--- a/src/core/profile_io_data_qt.cpp
+++ b/src/core/profile_io_data_qt.cpp
@@ -43,6 +43,7 @@
 #include "content/browser/storage_partition_impl.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
+#include "content/public/browser/browsing_data_remover.h"
 #include "content/public/browser/shared_cors_origin_access_list.h"
 #include "content/public/common/content_features.h"
 #include "net/ssl/ssl_config_service_defaults.h"
@@ -66,6 +67,7 @@ ProfileIODataQt::ProfileIODataQt(ProfileQt *profile)
 #if QT_CONFIG(ssl)
       m_clientCertificateStoreData(new ClientCertificateStoreData),
 #endif
+      m_removerObserver(this),
       m_weakPtrFactory(this)
 {
     if (content::BrowserThread::IsThreadInitialized(content::BrowserThread::UI))
@@ -128,6 +130,76 @@ void ProfileIODataQt::initializeOnUIThread()
     m_cookieDelegate = new CookieMonsterDelegateQt();
     m_cookieDelegate->setClient(m_profile->profileAdapter()->cookieStore());
     m_proxyConfigMonitor.reset(new ProxyConfigMonitor(m_profile->GetPrefs()));
+    if (!m_initialized) {
+        const std::lock_guard<QRecursiveMutex> lock(m_mutex);
+        generateAllStorage();
+        m_initialized = true;
+    }
+}
+
+void ProfileIODataQt::generateAllStorage()
+{
+    Q_ASSERT(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
+    const std::lock_guard<QRecursiveMutex> lock(m_mutex);
+    m_updateAllStorage = false;
+}
+
+void ProfileIODataQt::clearHttpCache()
+{
+    Q_ASSERT(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
+    const std::lock_guard<QRecursiveMutex> lock(m_mutex);
+
+    if (!m_pendingStorageRequestGeneration) {
+        m_pendingStorageRequestGeneration = true;
+        content::BrowsingDataRemover *remover =
+                content::BrowserContext::GetBrowsingDataRemover(m_profileAdapter->profile());
+        remover->AddObserver(&m_removerObserver);
+        remover->RemoveAndReply(base::Time(), base::Time::Max(),
+            content::BrowsingDataRemover::DATA_TYPE_CACHE,
+            content::BrowsingDataRemover::ORIGIN_TYPE_UNPROTECTED_WEB |
+                        content::BrowsingDataRemover::ORIGIN_TYPE_PROTECTED_WEB,
+            &m_removerObserver);
+        return;
+    }
+}
+
+bool ProfileIODataQt::hasPendingStorageRequest()
+{
+    if (!m_pendingStorageRequestGeneration) {
+        requestStorageGeneration();
+        return true;
+    }
+    return false;
+}
+
+void ProfileIODataQt::requestStorageGeneration() {
+    Q_ASSERT(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
+    const std::lock_guard<QRecursiveMutex> lock(m_mutex);
+    if (m_initialized && !m_updateAllStorage) {
+        m_updateAllStorage = true;
+        generateAllStorage();
+    }
+}
+
+void ProfileIODataQt::removeBrowsingDataRemoverObserver()
+{
+    content::BrowsingDataRemover *remover =
+            content::BrowserContext::GetBrowsingDataRemover(m_profileAdapter->profile());
+    remover->RemoveObserver(&m_removerObserver);
+}
+
+BrowsingDataRemoverObserverQt::BrowsingDataRemoverObserverQt(ProfileIODataQt *profileIOData)
+    : m_profileIOData(profileIOData)
+{
+}
+
+void BrowsingDataRemoverObserverQt::OnBrowsingDataRemoverDone()
+{
+    Q_ASSERT(m_profileIOData->m_pendingStorageRequestGeneration);
+    m_profileIOData->requestStorageGeneration();
+    m_profileIOData->removeBrowsingDataRemoverObserver();
+    m_profileIOData->m_pendingStorageRequestGeneration = false;
+    m_profileIOData->resetNetworkContext();
 }
 
 void ProfileIODataQt::setFullConfiguration()
diff --git a/src/core/profile_io_data_qt.h b/src/core/profile_io_data_qt.h
index 26ae1bcb..352e8097 100644
--- a/src/core/profile_io_data_qt.h
+++ b/src/core/profile_io_data_qt.h
@@ -40,6 +40,7 @@
 #ifndef PROFILE_IO_DATA_QT_H
 #define PROFILE_IO_DATA_QT_H
 
+#include "content/public/browser/browsing_data_remover.h"
 #include "chrome/browser/profiles/profile.h"
 #include "extensions/buildflags/buildflags.h"
 
@@ -65,6 +66,16 @@ struct ClientCertificateStoreData;
 class ProfileIODataQt;
 class ProfileQt;
 
+class BrowsingDataRemoverObserverQt : public content::BrowsingDataRemover::Observer {
+public:
+    BrowsingDataRemoverObserverQt(ProfileIODataQt *profileIOData);
+
+    void OnBrowsingDataRemoverDone() override;
+
+private:
+    ProfileIODataQt *m_profileIOData;
+};
+
 // ProfileIOData contains data that lives on the IOthread
 // we still use shared memebers and use mutex which breaks
 // idea for this object, but this is wip.
@@ -84,11 +95,16 @@ public:
     void initializeOnUIThread(); // runs on ui thread
     void shutdownOnUIThread(); // runs on ui thread
 
+    void generateAllStorage();
+
     bool canGetCookies(const QUrl &firstPartyUrl, const QUrl &url) const;
 
     // Used in NetworkDelegateQt::OnBeforeURLRequest.
     void setFullConfiguration(); // runs on ui thread
+    void clearHttpCache(); // runs on ui thread
     void resetNetworkContext(); // runs on ui thread
+    void requestStorageGeneration(); //runs on ui thread
+    bool hasPendingStorageRequest();
 
     network::mojom::NetworkContextParamsPtr CreateNetworkContextParams();
 
@@ -104,8 +120,11 @@ public:
     CookieMonsterDelegateQt *cookieDelegate() const { return m_cookieDelegate.get(); }
 
 private:
+    void removeBrowsingDataRemoverObserver();
+
     ProfileQt *m_profile;
     std::unique_ptr<content::ResourceContext> m_resourceContext;
+    base::WeakPtr<ProfileIODataQt> m_weakPtr;
     scoped_refptr<CookieMonsterDelegateQt> m_cookieDelegate;
     QPointer<ProfileAdapter> m_profileAdapter; // never dereferenced in IO thread and it is passed by qpointer
     ProfileAdapter::PersistentCookiesPolicy m_persistentCookiesPolicy;
@@ -125,10 +144,16 @@ private:
     QRecursiveMutex m_mutex;
 #endif
     int m_httpCacheMaxSize = 0;
+    bool m_initialized = false;
+    bool m_updateAllStorage = false;
     bool m_useForGlobalCertificateVerification = false;
+    BrowsingDataRemoverObserverQt m_removerObserver;
     base::WeakPtrFactory<ProfileIODataQt> m_weakPtrFactory; // this should be always the last member
     QString m_dataPath;
+    bool m_pendingStorageRequestGeneration = false;
     DISALLOW_COPY_AND_ASSIGN(ProfileIODataQt);
+
+    friend class BrowsingDataRemoverObserverQt;
 };
 } // namespace QtWebEngineCore
 
-- 
2.17.1

